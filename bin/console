#!/usr/bin/env ruby

require 'bundler/setup'
require 'cubby'
require 'cubby/model'
require 'pry'
require 'awesome_print'
require 'rainbow'
require_relative '../spec/spec_helper'

module TestModels
  class BasicUser < Cubby::Model
    attribute :first_name, ::Cubby::Types::String
    attribute :last_name, ::Cubby::Types::String
    attribute :birthdate, ::Cubby::Types::Date
    attribute :phone, ::Cubby::Types::String
    attribute :height, ::Cubby::Types::Float
    attribute :weight, ::Cubby::Types::Integer
    attribute :minion_ids, ::Cubby::Types::Array[::Cubby::Types::String]

    def self.factory
      new.tap do |m|
        m.first_name = FFaker::Name.first_name
        m.last_name = FFaker::Name.last_name
        m.birthdate = FFaker::Time.date
        m.phone = FFaker::PhoneNumber.phone_number
        m.height = rand(120)
        m.weight = rand(220)
        m.save
      end
    end
  end
end

class Cubby::Console
  attr_reader :store, :tmpdir

  def self.instance
    @instance ||= new
  end

  def initialize
    @store = nil
    @tmpdir = nil
    reset!

    ['SIGINT', 'SIGHUP'].each { |signal| trap(signal) { cleanup! } }
  end

  def reset!(opts = {})
    cleanup!
    @tmpdir = Pathname Dir.mktmpdir
    SpecHelper.tmpdir = @tmpdir
    Cubby.open @tmpdir, opts
    @store = Cubby.store
  end

  def cleanup!
    @store.close! unless @store.nil?
    @store = nil
    FileUtils.remove_entry @tmpdir unless @tmpdir.nil?
    @tmpdir = nil
  end

  def status
    puts <<-INFO
Path: #{store.path.realpath}

LMDB Info:
#{info}

LMDB Flags:
#{flags}

LMDB Stat:
#{stat}

    INFO
  end

  def info
    store.env.info.ai
  end

  def flags
    store.env.flags.ai
  end

  def stat
    store.env.stat.ai
  end

  def start
    puts <<-EOF
Console:
  reset!:      Create a fresh environment
  store:       Instance of store
  tmpdir:      Data directory
  store_stats: Cubby/LMDB Status
    EOF

    AwesomePrint.pry!
    Pry::Commands.block_command 'reset!', 'Create a fresh environment' do
      Cubby::Console.instance.reset!
    end

    Pry::Commands.block_command 'store', 'Instance of store', keep_retval: true do
      Cubby::Console.instance.store
    end

    Pry::Commands.block_command 'tmpdir', 'Data Directory', keep_retval: true do
      Cubby::Console.instance.tmpdir
    end

    Pry::Commands.block_command 'store_stats', 'LMDB Status' do
      output.puts Cubby::Console.instance.status
    end

    Pry.start(Cubby)
  ensure
    cleanup!
  end
end

Cubby::Console.instance.start
